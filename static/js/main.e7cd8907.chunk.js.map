{"version":3,"sources":["components/List.js","App.js","serviceWorker.js","index.js"],"names":["STATUS","Alive","Dead","unknown","List","Grid","container","spacing","this","props","items","map","person","item","xs","sm","md","lg","Card","key","id","CardActionArea","CardMedia","style","height","image","title","CardContent","Typography","gutterBottom","variant","component","className","name","color","status","React","Component","App","state","loading","list","setTimeout","fetch","then","response","json","setState","results","CircularProgress","getLoader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uVASMA,G,MAAS,CACbC,MAAO,eACPC,KAAM,eACNC,QAAS,iBAGUC,E,uKAEjB,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,GAAD,OACpB,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACnC,kBAACC,EAAA,EAAD,CAAMC,IAAKP,EAAOQ,IAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,SACjBC,MAAOb,EAAOa,MACdC,MAAM,0BAER,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,cAAY,EACZC,QAAQ,KACRC,UAAU,KACVC,UAAU,cAETpB,EAAOqB,MAEV,kBAACL,EAAA,EAAD,CACEE,QAAQ,QACRI,MAAM,gBACNH,UAAU,KAET/B,EAAOY,EAAOuB,QALjB,IAK2BvB,EAAOuB,oB,GA3BlBC,IAAMC,W,QC6BzBC,E,kDAtCb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IACD8B,MAAQ,CACXC,SAAS,EACTC,KAAM,IAJS,E,gEAQE,IAAD,OAClBC,YAAW,WACTC,MAAM,6CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACL,EAAKC,SAAS,CACZP,SAAS,EACTC,KAAMK,EAAKE,eAGhB,O,kCAIH,OAAO,kBAACC,EAAA,EAAD,Q,+BAIP,OACE,6BACGzC,KAAK+B,MAAMC,QACVhC,KAAK0C,YAEL,kBAAC,EAAD,CAAMxC,MAAOF,KAAK+B,MAAME,Y,GAhChBL,IAAMC,WCOJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7cd8907.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./List.css\";\n\nconst STATUS = {\n  Alive: \"üëç\",\n  Dead: \"üëé\",\n  unknown: \"üëé\",\n};\n\nexport default class List extends React.Component {\n  render() {\n    return (\n      <Grid container spacing={4}>\n        {this.props.items.map((person) => (\n          <Grid item xs={12} sm={6} md={4} lg={2}>\n            <Card key={person.id}>\n              <CardActionArea>\n                <CardMedia\n                  style={{ height: \"250px\" }}\n                  image={person.image}\n                  title=\"Contemplative Reptile\"\n                />\n                <CardContent>\n                  <Typography\n                    gutterBottom\n                    variant=\"h5\"\n                    component=\"h2\"\n                    className=\"personName\"\n                  >\n                    {person.name}\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    {STATUS[person.status]} {person.status}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport List from \"./components/List\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      list: [],\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      fetch(\"https://rickandmortyapi.com/api/character\")\n        .then((response) => response.json())\n        .then((json) => {\n          this.setState({\n            loading: false,\n            list: json.results,\n          });\n        });\n    }, 1000);\n  }\n\n  getLoader() {\n    return <CircularProgress />;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.loading ? (\n          this.getLoader()\n        ) : (\n          <List items={this.state.list} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}